LOOPS:
"while" loops:
```
public static boolean isPrime(int n) {
    int divisor = 2;
    while (divisor < n) {
        if (n % divisor == 0) {
            return false;
        }
        divisor++;
    }
    return true;
}

"for" loops
```
for (initialize; test; next) {
    statements;
}


public static boolean isPrime(int n) {
    for(int divisor = 2; divisor < n; divisor++) {
        if(n % divisor == 0) {
            return false;
        }
    }
    return true;
}

```

Loop Bounds:
```
// print all primes in range 2..n
public static void printPrimes(int n) {
    int i;
    for(int i=2; i<=n; i++) {
        if (isPrime(i)) {
            System.out.println(" " + i);
        }
    }
}
```

Arrays:
Def: obj consisting of a numbered list of variables.
Each var is a primitive type or reference to an object
```
char[] c;  // declaring a reference to an arr of characters
c = new char[4] // specify length of an array
c[0] = 'b';
c[3] = 'e';
c[4] = 's'; // Run-time ERROR, array-index out of bounds exception

String[] s = new String[8];
Object[] o = new Objects[8];

// can't mix up primitive types

```

field "c.length" tells length of the array
c.length = 7; // compile-time error


Primes revisited:
Sieve of Eratosthenes.
// !!! go through this code on a piece of paper!
```
public static void printPrimes(int n) {
    boolean[] prime = new boolean[n + 1]; // create an arr of bools of size n + 1
    int i;
    // assume numbers 2 to n are prime til proven otherwise
    for(i = 2;i<n;i++) {
        prime[i] = true;
    }


    for(int divisor=2;divisor*divisor<=n;divisor++) {
        // divisor <= Math.sqrt(n);
        if(prime[divisor]) {
            for(i=2*divisor;i<=n;i=i+divisor) {
                prime[i] = false;
            }
        }
    }

    for(i=2, i<=n;i++) {
        if(prime[i]) {
            System.out.println(i);
        }
    }
}

```

Multi-dimensional arrays:
two-dimensional array == an array of references to one-dimensional arrays
// !!! go through this code on a piece of paper!
ex: Pascal's triangle
```
public static int[][] pascalTriangle(int n) {
    int[][] pt = new int[n][];
    for(int i =0;i<n;i++){
        pt[i] = new int[i+1];
        pt[i][0] = 1;
        for(int j = 1;j<i;j++) {
            pt[i][j] = pt[i-1][j-1] + pt[i-1][j];
        }
        pt[i][i] = 1;
    }
    return pt;

}


```

pascalTriangle(3)
int[][] pt = new int[3][];
