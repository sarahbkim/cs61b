Game Tree Search Algorithms
============================
- Different ways of solving games like tic tac toe / chess
- Assume both opponents are infinitely intelligent and always choose the best move
- Each grid is assigned a numerical score that shows how optimistic
    the computer is that it will win
    1: computer is guaranteed a win
    -1: opponent guaranteed a win
    0: if perfect players will draw.
    ```
    DRAW
    COMPUTER_WIN
    HUMAN_WIN
    ```
Scoring a grid
--------------
Suppose computer is playing X.
The end of the grid:
 - 3 X's in a row: 1
 - 3 O's in a row: -1
 - no empty squares left and no one has won yet: 0

Any other grid: computed by the **minimax algorithm**
- consider each possible move from a given grid
- for each possible move, determine the child grid
- score each child grid by calling minimax recursively
- score parent grid.
    - computer's turn: choose move that yields the maximum score.
    - opponent's turn: choose move that yields the minimum score.

```
public Best chooseMove(boolean side) {
    Best myBest = new Best(); // my best move
    Best reply; // opponent's best reply

    if(current grid is full or there's a win) {
        return a Best with Grid's score, no move;
    }

    if(side == COMPUTER) {
        myBest.score = -2; // start score with even worse than possible
    } else {
        myBest.score = 2;
    }
    for(each legal move m) {
        perform move m; // modifies 'this' Grid
        reply = chooseMove(!side);
        undo move m;
        if(((side== COMPUTER) && (reply.score > myBest.score)) ||
        ((side == HUMAN) && reply.score < myBest.score))) {
            myBest.move = m;
            myBest.score = reply.score;
        }
        return myBest;
    }

}
```


Optimizations for the minimax algorithm
======================================
Simple Pruning
--------------
- If a player discovers a guaranteed winning move, there's no reason to
search for a better move => saves computational time

Alpha-beta Pruning
------------------
pass to chooseMove, alpha and beta parameters
alpha: a score the computer knows with certainty it can achieve from either
    current grid or higher up in tree, not in this grid
beta: opponent can achieve a score of beta or better
if beta becomes <= alpha, further investigation of current grid is useless

```
public Best chooseMove(boolean side, int alpha, int beta) {
    Best myBest = new Best(); // my best move
    Best reply; // opponent's best reply

    if(current grid is full or there's a win) {
        return a Best with Grid's score, no move;
    }

    if(side == COMPUTER) {
        myBest.score = alpha;
    } else {
        myBest.score = beta;
    }
    for(each legal move m) {
        perform move m; // modifies 'this' Grid
        reply = chooseMove(!side);
        undo move m;

        if(((side== COMPUTER) && (reply.score > myBest.score)) ) {
            myBest.move = m;
            myBest.score = reply.score;
            alpha = reply.score; // the pruning part...
        } else if ((side == HUMAN) && (reply.score < myBest.score)){
            myBest.move = m;
            myBest.score = reply.score;
            beta = reply.score; // the other pruning part ...
        }
        return myBest;
    }

}
```